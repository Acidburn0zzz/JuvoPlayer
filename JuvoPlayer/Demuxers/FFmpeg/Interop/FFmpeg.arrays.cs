/*!
 * https://github.com/SamsungDForum/JuvoPlayer
 * Copyright 2018, Samsung Electronics Co., Ltd
 * Licensed under the MIT license
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// <auto-generated/>

using System;

#pragma warning disable 0169 // disable "never used" warnings

namespace JuvoPlayer.Demuxers.FFmpeg.Interop
{
    internal unsafe struct short_array2
    {
        public static readonly int Size = 2;
        private fixed short _[2];

        public short this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (short_array2* p = &this) { return p->_[i]; }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (short_array2* p = &this) { p->_[i] = value; }
            }
        }

        public short[] ToArray()
        {
            fixed (short_array2* p = &this)
            {
                var a = new short[Size];
                for (uint i = 0; i < Size; i++) a[i] = p->_[i];
                return a;
            }
        }

        public void UpdateFrom(short[] array)
        {
            fixed (short_array2* p = &this)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    p->_[i++] = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator short[](short_array2 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct byte_ptrArray3
    {
        public static readonly int Size = 3;
        private byte* _0;
        private byte* _1;
        private byte* _2;

        public byte* this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (byte** p0 = &_0) { return *(p0 + i); }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (byte** p0 = &_0) { *(p0 + i) = value; }
            }
        }

        public byte*[] ToArray()
        {
            fixed (byte** p0 = &_0)
            {
                var a = new byte*[Size];
                for (uint i = 0; i < Size; i++) a[i] = *(p0 + i);
                return a;
            }
        }

        public void UpdateFrom(byte*[] array)
        {
            fixed (byte** p0 = &_0)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    *(p0 + i++) = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator byte*[](byte_ptrArray3 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct int_array3
    {
        public static readonly int Size = 3;
        private fixed int _[3];

        public int this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (int_array3* p = &this) { return p->_[i]; }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (int_array3* p = &this) { p->_[i] = value; }
            }
        }

        public int[] ToArray()
        {
            fixed (int_array3* p = &this)
            {
                var a = new int[Size];
                for (uint i = 0; i < Size; i++) a[i] = p->_[i];
                return a;
            }
        }

        public void UpdateFrom(int[] array)
        {
            fixed (int_array3* p = &this)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    p->_[i++] = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator int[](int_array3 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct AVComponentDescriptor_array4
    {
        public static readonly int Size = 4;
        private AVComponentDescriptor _0;
        private AVComponentDescriptor _1;
        private AVComponentDescriptor _2;
        private AVComponentDescriptor _3;

        public AVComponentDescriptor this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (AVComponentDescriptor* p0 = &_0) { return *(p0 + i); }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (AVComponentDescriptor* p0 = &_0) { *(p0 + i) = value; }
            }
        }

        public AVComponentDescriptor[] ToArray()
        {
            fixed (AVComponentDescriptor* p0 = &_0)
            {
                var a = new AVComponentDescriptor[Size];
                for (uint i = 0; i < Size; i++) a[i] = *(p0 + i);
                return a;
            }
        }

        public void UpdateFrom(AVComponentDescriptor[] array)
        {
            fixed (AVComponentDescriptor* p0 = &_0)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    *(p0 + i++) = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator AVComponentDescriptor[](AVComponentDescriptor_array4 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct byte_ptrArray4
    {
        public static readonly int Size = 4;
        private byte* _0;
        private byte* _1;
        private byte* _2;
        private byte* _3;

        public byte* this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (byte** p0 = &_0) { return *(p0 + i); }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (byte** p0 = &_0) { *(p0 + i) = value; }
            }
        }

        public byte*[] ToArray()
        {
            fixed (byte** p0 = &_0)
            {
                var a = new byte*[Size];
                for (uint i = 0; i < Size; i++) a[i] = *(p0 + i);
                return a;
            }
        }

        public void UpdateFrom(byte*[] array)
        {
            fixed (byte** p0 = &_0)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    *(p0 + i++) = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator byte*[](byte_ptrArray4 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct int_array4
    {
        public static readonly int Size = 4;
        private fixed int _[4];

        public int this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (int_array4* p = &this) { return p->_[i]; }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (int_array4* p = &this) { p->_[i] = value; }
            }
        }

        public int[] ToArray()
        {
            fixed (int_array4* p = &this)
            {
                var a = new int[Size];
                for (uint i = 0; i < Size; i++) a[i] = p->_[i];
                return a;
            }
        }

        public void UpdateFrom(int[] array)
        {
            fixed (int_array4* p = &this)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    p->_[i++] = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator int[](int_array4 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct long_array4
    {
        public static readonly int Size = 4;
        private fixed long _[4];

        public long this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (long_array4* p = &this) { return p->_[i]; }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (long_array4* p = &this) { p->_[i] = value; }
            }
        }

        public long[] ToArray()
        {
            fixed (long_array4* p = &this)
            {
                var a = new long[Size];
                for (uint i = 0; i < Size; i++) a[i] = p->_[i];
                return a;
            }
        }

        public void UpdateFrom(long[] array)
        {
            fixed (long_array4* p = &this)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    p->_[i++] = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator long[](long_array4 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct int_array5
    {
        public static readonly int Size = 5;
        private fixed int _[5];

        public int this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (int_array5* p = &this) { return p->_[i]; }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (int_array5* p = &this) { p->_[i] = value; }
            }
        }

        public int[] ToArray()
        {
            fixed (int_array5* p = &this)
            {
                var a = new int[Size];
                for (uint i = 0; i < Size; i++) a[i] = p->_[i];
                return a;
            }
        }

        public void UpdateFrom(int[] array)
        {
            fixed (int_array5* p = &this)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    p->_[i++] = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator int[](int_array5 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct short_arrayOfArray6
    {
        public static readonly int Size = 6;
        private short_array2 _0;
        private short_array2 _1;
        private short_array2 _2;
        private short_array2 _3;
        private short_array2 _4;
        private short_array2 _5;

        public short_array2 this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (short_array2* p0 = &_0) { return *(p0 + i); }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (short_array2* p0 = &_0) { *(p0 + i) = value; }
            }
        }

        public short_array2[] ToArray()
        {
            fixed (short_array2* p0 = &_0)
            {
                var a = new short_array2[Size];
                for (uint i = 0; i < Size; i++) a[i] = *(p0 + i);
                return a;
            }
        }

        public void UpdateFrom(short_array2[] array)
        {
            fixed (short_array2* p0 = &_0)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    *(p0 + i++) = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator short_array2[](short_arrayOfArray6 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct AVBufferRef_ptrArray8
    {
        public static readonly int Size = 8;
        private AVBufferRef* _0;
        private AVBufferRef* _1;
        private AVBufferRef* _2;
        private AVBufferRef* _3;
        private AVBufferRef* _4;
        private AVBufferRef* _5;
        private AVBufferRef* _6;
        private AVBufferRef* _7;

        public AVBufferRef* this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (AVBufferRef** p0 = &_0) { return *(p0 + i); }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (AVBufferRef** p0 = &_0) { *(p0 + i) = value; }
            }
        }

        public AVBufferRef*[] ToArray()
        {
            fixed (AVBufferRef** p0 = &_0)
            {
                var a = new AVBufferRef*[Size];
                for (uint i = 0; i < Size; i++) a[i] = *(p0 + i);
                return a;
            }
        }

        public void UpdateFrom(AVBufferRef*[] array)
        {
            fixed (AVBufferRef** p0 = &_0)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    *(p0 + i++) = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator AVBufferRef*[](AVBufferRef_ptrArray8 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct byte_ptrArray8
    {
        public static readonly int Size = 8;
        private byte* _0;
        private byte* _1;
        private byte* _2;
        private byte* _3;
        private byte* _4;
        private byte* _5;
        private byte* _6;
        private byte* _7;

        public byte* this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (byte** p0 = &_0) { return *(p0 + i); }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (byte** p0 = &_0) { *(p0 + i) = value; }
            }
        }

        public byte*[] ToArray()
        {
            fixed (byte** p0 = &_0)
            {
                var a = new byte*[Size];
                for (uint i = 0; i < Size; i++) a[i] = *(p0 + i);
                return a;
            }
        }

        public void UpdateFrom(byte*[] array)
        {
            fixed (byte** p0 = &_0)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    *(p0 + i++) = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator byte*[](byte_ptrArray8 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct int_array8
    {
        public static readonly int Size = 8;
        private fixed int _[8];

        public int this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (int_array8* p = &this) { return p->_[i]; }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (int_array8* p = &this) { p->_[i] = value; }
            }
        }

        public int[] ToArray()
        {
            fixed (int_array8* p = &this)
            {
                var a = new int[Size];
                for (uint i = 0; i < Size; i++) a[i] = p->_[i];
                return a;
            }
        }

        public void UpdateFrom(int[] array)
        {
            fixed (int_array8* p = &this)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    p->_[i++] = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator int[](int_array8 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct ulong_array8
    {
        public static readonly int Size = 8;
        private fixed ulong _[8];

        public ulong this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (ulong_array8* p = &this) { return p->_[i]; }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (ulong_array8* p = &this) { p->_[i] = value; }
            }
        }

        public ulong[] ToArray()
        {
            fixed (ulong_array8* p = &this)
            {
                var a = new ulong[Size];
                for (uint i = 0; i < Size; i++) a[i] = p->_[i];
                return a;
            }
        }

        public void UpdateFrom(ulong[] array)
        {
            fixed (ulong_array8* p = &this)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    p->_[i++] = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator ulong[](ulong_array8 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct byte_array17
    {
        public static readonly int Size = 17;
        private fixed byte _[17];

        public byte this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (byte_array17* p = &this) { return p->_[i]; }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (byte_array17* p = &this) { p->_[i] = value; }
            }
        }

        public byte[] ToArray()
        {
            fixed (byte_array17* p = &this)
            {
                var a = new byte[Size];
                for (uint i = 0; i < Size; i++) a[i] = p->_[i];
                return a;
            }
        }

        public void UpdateFrom(byte[] array)
        {
            fixed (byte_array17* p = &this)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    p->_[i++] = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator byte[](byte_array17 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct long_array17
    {
        public static readonly int Size = 17;
        private fixed long _[17];

        public long this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (long_array17* p = &this) { return p->_[i]; }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (long_array17* p = &this) { p->_[i] = value; }
            }
        }

        public long[] ToArray()
        {
            fixed (long_array17* p = &this)
            {
                var a = new long[Size];
                for (uint i = 0; i < Size; i++) a[i] = p->_[i];
                return a;
            }
        }

        public void UpdateFrom(long[] array)
        {
            fixed (long_array17* p = &this)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    p->_[i++] = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator long[](long_array17 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct byte_array16
    {
        public static readonly int Size = 16;
        private fixed byte _[16];

        public byte this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (byte_array16* p = &this) { return p->_[i]; }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (byte_array16* p = &this) { p->_[i] = value; }
            }
        }

        public byte[] ToArray()
        {
            fixed (byte_array16* p = &this)
            {
                var a = new byte[Size];
                for (uint i = 0; i < Size; i++) a[i] = p->_[i];
                return a;
            }
        }

        public void UpdateFrom(byte[] array)
        {
            fixed (byte_array16* p = &this)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    p->_[i++] = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator byte[](byte_array16 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct byte_array32
    {
        public static readonly int Size = 32;
        private fixed byte _[32];

        public byte this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (byte_array32* p = &this) { return p->_[i]; }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (byte_array32* p = &this) { p->_[i] = value; }
            }
        }

        public byte[] ToArray()
        {
            fixed (byte_array32* p = &this)
            {
                var a = new byte[Size];
                for (uint i = 0; i < Size; i++) a[i] = p->_[i];
                return a;
            }
        }

        public void UpdateFrom(byte[] array)
        {
            fixed (byte_array32* p = &this)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    p->_[i++] = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator byte[](byte_array32 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct double_array399
    {
        public static readonly int Size = 399;
        private fixed double _[399];

        public double this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (double_array399* p = &this) { return p->_[i]; }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (double_array399* p = &this) { p->_[i] = value; }
            }
        }

        public double[] ToArray()
        {
            fixed (double_array399* p = &this)
            {
                var a = new double[Size];
                for (uint i = 0; i < Size; i++) a[i] = p->_[i];
                return a;
            }
        }

        public void UpdateFrom(double[] array)
        {
            fixed (double_array399* p = &this)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    p->_[i++] = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator double[](double_array399 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct double_arrayOfArray798
    {
        public static readonly int Size = 798;
        private double_array399 _0;
        private double_array399 _1;
        private double_array399 _2;
        private double_array399 _3;
        private double_array399 _4;
        private double_array399 _5;
        private double_array399 _6;
        private double_array399 _7;
        private double_array399 _8;
        private double_array399 _9;
        private double_array399 _10;
        private double_array399 _11;
        private double_array399 _12;
        private double_array399 _13;
        private double_array399 _14;
        private double_array399 _15;
        private double_array399 _16;
        private double_array399 _17;
        private double_array399 _18;
        private double_array399 _19;
        private double_array399 _20;
        private double_array399 _21;
        private double_array399 _22;
        private double_array399 _23;
        private double_array399 _24;
        private double_array399 _25;
        private double_array399 _26;
        private double_array399 _27;
        private double_array399 _28;
        private double_array399 _29;
        private double_array399 _30;
        private double_array399 _31;
        private double_array399 _32;
        private double_array399 _33;
        private double_array399 _34;
        private double_array399 _35;
        private double_array399 _36;
        private double_array399 _37;
        private double_array399 _38;
        private double_array399 _39;
        private double_array399 _40;
        private double_array399 _41;
        private double_array399 _42;
        private double_array399 _43;
        private double_array399 _44;
        private double_array399 _45;
        private double_array399 _46;
        private double_array399 _47;
        private double_array399 _48;
        private double_array399 _49;
        private double_array399 _50;
        private double_array399 _51;
        private double_array399 _52;
        private double_array399 _53;
        private double_array399 _54;
        private double_array399 _55;
        private double_array399 _56;
        private double_array399 _57;
        private double_array399 _58;
        private double_array399 _59;
        private double_array399 _60;
        private double_array399 _61;
        private double_array399 _62;
        private double_array399 _63;
        private double_array399 _64;
        private double_array399 _65;
        private double_array399 _66;
        private double_array399 _67;
        private double_array399 _68;
        private double_array399 _69;
        private double_array399 _70;
        private double_array399 _71;
        private double_array399 _72;
        private double_array399 _73;
        private double_array399 _74;
        private double_array399 _75;
        private double_array399 _76;
        private double_array399 _77;
        private double_array399 _78;
        private double_array399 _79;
        private double_array399 _80;
        private double_array399 _81;
        private double_array399 _82;
        private double_array399 _83;
        private double_array399 _84;
        private double_array399 _85;
        private double_array399 _86;
        private double_array399 _87;
        private double_array399 _88;
        private double_array399 _89;
        private double_array399 _90;
        private double_array399 _91;
        private double_array399 _92;
        private double_array399 _93;
        private double_array399 _94;
        private double_array399 _95;
        private double_array399 _96;
        private double_array399 _97;
        private double_array399 _98;
        private double_array399 _99;
        private double_array399 _100;
        private double_array399 _101;
        private double_array399 _102;
        private double_array399 _103;
        private double_array399 _104;
        private double_array399 _105;
        private double_array399 _106;
        private double_array399 _107;
        private double_array399 _108;
        private double_array399 _109;
        private double_array399 _110;
        private double_array399 _111;
        private double_array399 _112;
        private double_array399 _113;
        private double_array399 _114;
        private double_array399 _115;
        private double_array399 _116;
        private double_array399 _117;
        private double_array399 _118;
        private double_array399 _119;
        private double_array399 _120;
        private double_array399 _121;
        private double_array399 _122;
        private double_array399 _123;
        private double_array399 _124;
        private double_array399 _125;
        private double_array399 _126;
        private double_array399 _127;
        private double_array399 _128;
        private double_array399 _129;
        private double_array399 _130;
        private double_array399 _131;
        private double_array399 _132;
        private double_array399 _133;
        private double_array399 _134;
        private double_array399 _135;
        private double_array399 _136;
        private double_array399 _137;
        private double_array399 _138;
        private double_array399 _139;
        private double_array399 _140;
        private double_array399 _141;
        private double_array399 _142;
        private double_array399 _143;
        private double_array399 _144;
        private double_array399 _145;
        private double_array399 _146;
        private double_array399 _147;
        private double_array399 _148;
        private double_array399 _149;
        private double_array399 _150;
        private double_array399 _151;
        private double_array399 _152;
        private double_array399 _153;
        private double_array399 _154;
        private double_array399 _155;
        private double_array399 _156;
        private double_array399 _157;
        private double_array399 _158;
        private double_array399 _159;
        private double_array399 _160;
        private double_array399 _161;
        private double_array399 _162;
        private double_array399 _163;
        private double_array399 _164;
        private double_array399 _165;
        private double_array399 _166;
        private double_array399 _167;
        private double_array399 _168;
        private double_array399 _169;
        private double_array399 _170;
        private double_array399 _171;
        private double_array399 _172;
        private double_array399 _173;
        private double_array399 _174;
        private double_array399 _175;
        private double_array399 _176;
        private double_array399 _177;
        private double_array399 _178;
        private double_array399 _179;
        private double_array399 _180;
        private double_array399 _181;
        private double_array399 _182;
        private double_array399 _183;
        private double_array399 _184;
        private double_array399 _185;
        private double_array399 _186;
        private double_array399 _187;
        private double_array399 _188;
        private double_array399 _189;
        private double_array399 _190;
        private double_array399 _191;
        private double_array399 _192;
        private double_array399 _193;
        private double_array399 _194;
        private double_array399 _195;
        private double_array399 _196;
        private double_array399 _197;
        private double_array399 _198;
        private double_array399 _199;
        private double_array399 _200;
        private double_array399 _201;
        private double_array399 _202;
        private double_array399 _203;
        private double_array399 _204;
        private double_array399 _205;
        private double_array399 _206;
        private double_array399 _207;
        private double_array399 _208;
        private double_array399 _209;
        private double_array399 _210;
        private double_array399 _211;
        private double_array399 _212;
        private double_array399 _213;
        private double_array399 _214;
        private double_array399 _215;
        private double_array399 _216;
        private double_array399 _217;
        private double_array399 _218;
        private double_array399 _219;
        private double_array399 _220;
        private double_array399 _221;
        private double_array399 _222;
        private double_array399 _223;
        private double_array399 _224;
        private double_array399 _225;
        private double_array399 _226;
        private double_array399 _227;
        private double_array399 _228;
        private double_array399 _229;
        private double_array399 _230;
        private double_array399 _231;
        private double_array399 _232;
        private double_array399 _233;
        private double_array399 _234;
        private double_array399 _235;
        private double_array399 _236;
        private double_array399 _237;
        private double_array399 _238;
        private double_array399 _239;
        private double_array399 _240;
        private double_array399 _241;
        private double_array399 _242;
        private double_array399 _243;
        private double_array399 _244;
        private double_array399 _245;
        private double_array399 _246;
        private double_array399 _247;
        private double_array399 _248;
        private double_array399 _249;
        private double_array399 _250;
        private double_array399 _251;
        private double_array399 _252;
        private double_array399 _253;
        private double_array399 _254;
        private double_array399 _255;
        private double_array399 _256;
        private double_array399 _257;
        private double_array399 _258;
        private double_array399 _259;
        private double_array399 _260;
        private double_array399 _261;
        private double_array399 _262;
        private double_array399 _263;
        private double_array399 _264;
        private double_array399 _265;
        private double_array399 _266;
        private double_array399 _267;
        private double_array399 _268;
        private double_array399 _269;
        private double_array399 _270;
        private double_array399 _271;
        private double_array399 _272;
        private double_array399 _273;
        private double_array399 _274;
        private double_array399 _275;
        private double_array399 _276;
        private double_array399 _277;
        private double_array399 _278;
        private double_array399 _279;
        private double_array399 _280;
        private double_array399 _281;
        private double_array399 _282;
        private double_array399 _283;
        private double_array399 _284;
        private double_array399 _285;
        private double_array399 _286;
        private double_array399 _287;
        private double_array399 _288;
        private double_array399 _289;
        private double_array399 _290;
        private double_array399 _291;
        private double_array399 _292;
        private double_array399 _293;
        private double_array399 _294;
        private double_array399 _295;
        private double_array399 _296;
        private double_array399 _297;
        private double_array399 _298;
        private double_array399 _299;
        private double_array399 _300;
        private double_array399 _301;
        private double_array399 _302;
        private double_array399 _303;
        private double_array399 _304;
        private double_array399 _305;
        private double_array399 _306;
        private double_array399 _307;
        private double_array399 _308;
        private double_array399 _309;
        private double_array399 _310;
        private double_array399 _311;
        private double_array399 _312;
        private double_array399 _313;
        private double_array399 _314;
        private double_array399 _315;
        private double_array399 _316;
        private double_array399 _317;
        private double_array399 _318;
        private double_array399 _319;
        private double_array399 _320;
        private double_array399 _321;
        private double_array399 _322;
        private double_array399 _323;
        private double_array399 _324;
        private double_array399 _325;
        private double_array399 _326;
        private double_array399 _327;
        private double_array399 _328;
        private double_array399 _329;
        private double_array399 _330;
        private double_array399 _331;
        private double_array399 _332;
        private double_array399 _333;
        private double_array399 _334;
        private double_array399 _335;
        private double_array399 _336;
        private double_array399 _337;
        private double_array399 _338;
        private double_array399 _339;
        private double_array399 _340;
        private double_array399 _341;
        private double_array399 _342;
        private double_array399 _343;
        private double_array399 _344;
        private double_array399 _345;
        private double_array399 _346;
        private double_array399 _347;
        private double_array399 _348;
        private double_array399 _349;
        private double_array399 _350;
        private double_array399 _351;
        private double_array399 _352;
        private double_array399 _353;
        private double_array399 _354;
        private double_array399 _355;
        private double_array399 _356;
        private double_array399 _357;
        private double_array399 _358;
        private double_array399 _359;
        private double_array399 _360;
        private double_array399 _361;
        private double_array399 _362;
        private double_array399 _363;
        private double_array399 _364;
        private double_array399 _365;
        private double_array399 _366;
        private double_array399 _367;
        private double_array399 _368;
        private double_array399 _369;
        private double_array399 _370;
        private double_array399 _371;
        private double_array399 _372;
        private double_array399 _373;
        private double_array399 _374;
        private double_array399 _375;
        private double_array399 _376;
        private double_array399 _377;
        private double_array399 _378;
        private double_array399 _379;
        private double_array399 _380;
        private double_array399 _381;
        private double_array399 _382;
        private double_array399 _383;
        private double_array399 _384;
        private double_array399 _385;
        private double_array399 _386;
        private double_array399 _387;
        private double_array399 _388;
        private double_array399 _389;
        private double_array399 _390;
        private double_array399 _391;
        private double_array399 _392;
        private double_array399 _393;
        private double_array399 _394;
        private double_array399 _395;
        private double_array399 _396;
        private double_array399 _397;
        private double_array399 _398;
        private double_array399 _399;
        private double_array399 _400;
        private double_array399 _401;
        private double_array399 _402;
        private double_array399 _403;
        private double_array399 _404;
        private double_array399 _405;
        private double_array399 _406;
        private double_array399 _407;
        private double_array399 _408;
        private double_array399 _409;
        private double_array399 _410;
        private double_array399 _411;
        private double_array399 _412;
        private double_array399 _413;
        private double_array399 _414;
        private double_array399 _415;
        private double_array399 _416;
        private double_array399 _417;
        private double_array399 _418;
        private double_array399 _419;
        private double_array399 _420;
        private double_array399 _421;
        private double_array399 _422;
        private double_array399 _423;
        private double_array399 _424;
        private double_array399 _425;
        private double_array399 _426;
        private double_array399 _427;
        private double_array399 _428;
        private double_array399 _429;
        private double_array399 _430;
        private double_array399 _431;
        private double_array399 _432;
        private double_array399 _433;
        private double_array399 _434;
        private double_array399 _435;
        private double_array399 _436;
        private double_array399 _437;
        private double_array399 _438;
        private double_array399 _439;
        private double_array399 _440;
        private double_array399 _441;
        private double_array399 _442;
        private double_array399 _443;
        private double_array399 _444;
        private double_array399 _445;
        private double_array399 _446;
        private double_array399 _447;
        private double_array399 _448;
        private double_array399 _449;
        private double_array399 _450;
        private double_array399 _451;
        private double_array399 _452;
        private double_array399 _453;
        private double_array399 _454;
        private double_array399 _455;
        private double_array399 _456;
        private double_array399 _457;
        private double_array399 _458;
        private double_array399 _459;
        private double_array399 _460;
        private double_array399 _461;
        private double_array399 _462;
        private double_array399 _463;
        private double_array399 _464;
        private double_array399 _465;
        private double_array399 _466;
        private double_array399 _467;
        private double_array399 _468;
        private double_array399 _469;
        private double_array399 _470;
        private double_array399 _471;
        private double_array399 _472;
        private double_array399 _473;
        private double_array399 _474;
        private double_array399 _475;
        private double_array399 _476;
        private double_array399 _477;
        private double_array399 _478;
        private double_array399 _479;
        private double_array399 _480;
        private double_array399 _481;
        private double_array399 _482;
        private double_array399 _483;
        private double_array399 _484;
        private double_array399 _485;
        private double_array399 _486;
        private double_array399 _487;
        private double_array399 _488;
        private double_array399 _489;
        private double_array399 _490;
        private double_array399 _491;
        private double_array399 _492;
        private double_array399 _493;
        private double_array399 _494;
        private double_array399 _495;
        private double_array399 _496;
        private double_array399 _497;
        private double_array399 _498;
        private double_array399 _499;
        private double_array399 _500;
        private double_array399 _501;
        private double_array399 _502;
        private double_array399 _503;
        private double_array399 _504;
        private double_array399 _505;
        private double_array399 _506;
        private double_array399 _507;
        private double_array399 _508;
        private double_array399 _509;
        private double_array399 _510;
        private double_array399 _511;
        private double_array399 _512;
        private double_array399 _513;
        private double_array399 _514;
        private double_array399 _515;
        private double_array399 _516;
        private double_array399 _517;
        private double_array399 _518;
        private double_array399 _519;
        private double_array399 _520;
        private double_array399 _521;
        private double_array399 _522;
        private double_array399 _523;
        private double_array399 _524;
        private double_array399 _525;
        private double_array399 _526;
        private double_array399 _527;
        private double_array399 _528;
        private double_array399 _529;
        private double_array399 _530;
        private double_array399 _531;
        private double_array399 _532;
        private double_array399 _533;
        private double_array399 _534;
        private double_array399 _535;
        private double_array399 _536;
        private double_array399 _537;
        private double_array399 _538;
        private double_array399 _539;
        private double_array399 _540;
        private double_array399 _541;
        private double_array399 _542;
        private double_array399 _543;
        private double_array399 _544;
        private double_array399 _545;
        private double_array399 _546;
        private double_array399 _547;
        private double_array399 _548;
        private double_array399 _549;
        private double_array399 _550;
        private double_array399 _551;
        private double_array399 _552;
        private double_array399 _553;
        private double_array399 _554;
        private double_array399 _555;
        private double_array399 _556;
        private double_array399 _557;
        private double_array399 _558;
        private double_array399 _559;
        private double_array399 _560;
        private double_array399 _561;
        private double_array399 _562;
        private double_array399 _563;
        private double_array399 _564;
        private double_array399 _565;
        private double_array399 _566;
        private double_array399 _567;
        private double_array399 _568;
        private double_array399 _569;
        private double_array399 _570;
        private double_array399 _571;
        private double_array399 _572;
        private double_array399 _573;
        private double_array399 _574;
        private double_array399 _575;
        private double_array399 _576;
        private double_array399 _577;
        private double_array399 _578;
        private double_array399 _579;
        private double_array399 _580;
        private double_array399 _581;
        private double_array399 _582;
        private double_array399 _583;
        private double_array399 _584;
        private double_array399 _585;
        private double_array399 _586;
        private double_array399 _587;
        private double_array399 _588;
        private double_array399 _589;
        private double_array399 _590;
        private double_array399 _591;
        private double_array399 _592;
        private double_array399 _593;
        private double_array399 _594;
        private double_array399 _595;
        private double_array399 _596;
        private double_array399 _597;
        private double_array399 _598;
        private double_array399 _599;
        private double_array399 _600;
        private double_array399 _601;
        private double_array399 _602;
        private double_array399 _603;
        private double_array399 _604;
        private double_array399 _605;
        private double_array399 _606;
        private double_array399 _607;
        private double_array399 _608;
        private double_array399 _609;
        private double_array399 _610;
        private double_array399 _611;
        private double_array399 _612;
        private double_array399 _613;
        private double_array399 _614;
        private double_array399 _615;
        private double_array399 _616;
        private double_array399 _617;
        private double_array399 _618;
        private double_array399 _619;
        private double_array399 _620;
        private double_array399 _621;
        private double_array399 _622;
        private double_array399 _623;
        private double_array399 _624;
        private double_array399 _625;
        private double_array399 _626;
        private double_array399 _627;
        private double_array399 _628;
        private double_array399 _629;
        private double_array399 _630;
        private double_array399 _631;
        private double_array399 _632;
        private double_array399 _633;
        private double_array399 _634;
        private double_array399 _635;
        private double_array399 _636;
        private double_array399 _637;
        private double_array399 _638;
        private double_array399 _639;
        private double_array399 _640;
        private double_array399 _641;
        private double_array399 _642;
        private double_array399 _643;
        private double_array399 _644;
        private double_array399 _645;
        private double_array399 _646;
        private double_array399 _647;
        private double_array399 _648;
        private double_array399 _649;
        private double_array399 _650;
        private double_array399 _651;
        private double_array399 _652;
        private double_array399 _653;
        private double_array399 _654;
        private double_array399 _655;
        private double_array399 _656;
        private double_array399 _657;
        private double_array399 _658;
        private double_array399 _659;
        private double_array399 _660;
        private double_array399 _661;
        private double_array399 _662;
        private double_array399 _663;
        private double_array399 _664;
        private double_array399 _665;
        private double_array399 _666;
        private double_array399 _667;
        private double_array399 _668;
        private double_array399 _669;
        private double_array399 _670;
        private double_array399 _671;
        private double_array399 _672;
        private double_array399 _673;
        private double_array399 _674;
        private double_array399 _675;
        private double_array399 _676;
        private double_array399 _677;
        private double_array399 _678;
        private double_array399 _679;
        private double_array399 _680;
        private double_array399 _681;
        private double_array399 _682;
        private double_array399 _683;
        private double_array399 _684;
        private double_array399 _685;
        private double_array399 _686;
        private double_array399 _687;
        private double_array399 _688;
        private double_array399 _689;
        private double_array399 _690;
        private double_array399 _691;
        private double_array399 _692;
        private double_array399 _693;
        private double_array399 _694;
        private double_array399 _695;
        private double_array399 _696;
        private double_array399 _697;
        private double_array399 _698;
        private double_array399 _699;
        private double_array399 _700;
        private double_array399 _701;
        private double_array399 _702;
        private double_array399 _703;
        private double_array399 _704;
        private double_array399 _705;
        private double_array399 _706;
        private double_array399 _707;
        private double_array399 _708;
        private double_array399 _709;
        private double_array399 _710;
        private double_array399 _711;
        private double_array399 _712;
        private double_array399 _713;
        private double_array399 _714;
        private double_array399 _715;
        private double_array399 _716;
        private double_array399 _717;
        private double_array399 _718;
        private double_array399 _719;
        private double_array399 _720;
        private double_array399 _721;
        private double_array399 _722;
        private double_array399 _723;
        private double_array399 _724;
        private double_array399 _725;
        private double_array399 _726;
        private double_array399 _727;
        private double_array399 _728;
        private double_array399 _729;
        private double_array399 _730;
        private double_array399 _731;
        private double_array399 _732;
        private double_array399 _733;
        private double_array399 _734;
        private double_array399 _735;
        private double_array399 _736;
        private double_array399 _737;
        private double_array399 _738;
        private double_array399 _739;
        private double_array399 _740;
        private double_array399 _741;
        private double_array399 _742;
        private double_array399 _743;
        private double_array399 _744;
        private double_array399 _745;
        private double_array399 _746;
        private double_array399 _747;
        private double_array399 _748;
        private double_array399 _749;
        private double_array399 _750;
        private double_array399 _751;
        private double_array399 _752;
        private double_array399 _753;
        private double_array399 _754;
        private double_array399 _755;
        private double_array399 _756;
        private double_array399 _757;
        private double_array399 _758;
        private double_array399 _759;
        private double_array399 _760;
        private double_array399 _761;
        private double_array399 _762;
        private double_array399 _763;
        private double_array399 _764;
        private double_array399 _765;
        private double_array399 _766;
        private double_array399 _767;
        private double_array399 _768;
        private double_array399 _769;
        private double_array399 _770;
        private double_array399 _771;
        private double_array399 _772;
        private double_array399 _773;
        private double_array399 _774;
        private double_array399 _775;
        private double_array399 _776;
        private double_array399 _777;
        private double_array399 _778;
        private double_array399 _779;
        private double_array399 _780;
        private double_array399 _781;
        private double_array399 _782;
        private double_array399 _783;
        private double_array399 _784;
        private double_array399 _785;
        private double_array399 _786;
        private double_array399 _787;
        private double_array399 _788;
        private double_array399 _789;
        private double_array399 _790;
        private double_array399 _791;
        private double_array399 _792;
        private double_array399 _793;
        private double_array399 _794;
        private double_array399 _795;
        private double_array399 _796;
        private double_array399 _797;

        public double_array399 this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (double_array399* p0 = &_0) { return *(p0 + i); }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (double_array399* p0 = &_0) { *(p0 + i) = value; }
            }
        }

        public double_array399[] ToArray()
        {
            fixed (double_array399* p0 = &_0)
            {
                var a = new double_array399[Size];
                for (uint i = 0; i < Size; i++) a[i] = *(p0 + i);
                return a;
            }
        }

        public void UpdateFrom(double_array399[] array)
        {
            fixed (double_array399* p0 = &_0)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    *(p0 + i++) = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator double_array399[](double_arrayOfArray798 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct byte_array1024
    {
        public static readonly int Size = 1024;
        private fixed byte _[1024];

        public byte this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (byte_array1024* p = &this) { return p->_[i]; }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (byte_array1024* p = &this) { p->_[i] = value; }
            }
        }

        public byte[] ToArray()
        {
            fixed (byte_array1024* p = &this)
            {
                var a = new byte[Size];
                for (uint i = 0; i < Size; i++) a[i] = p->_[i];
                return a;
            }
        }

        public void UpdateFrom(byte[] array)
        {
            fixed (byte_array1024* p = &this)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    p->_[i++] = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator byte[](byte_array1024 @struct)
        {
            return @struct.ToArray();
        }
    }

    internal unsafe struct byte_array61440
    {
        public static readonly int Size = 61440;
        private fixed byte _[61440];

        public byte this[uint i]
        {
            get
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (byte_array61440* p = &this) { return p->_[i]; }
            }
            set
            {
                if (i > Size) throw new ArgumentOutOfRangeException();
                fixed (byte_array61440* p = &this) { p->_[i] = value; }
            }
        }

        public byte[] ToArray()
        {
            fixed (byte_array61440* p = &this)
            {
                var a = new byte[Size];
                for (uint i = 0; i < Size; i++) a[i] = p->_[i];
                return a;
            }
        }

        public void UpdateFrom(byte[] array)
        {
            fixed (byte_array61440* p = &this)
            {
                uint i = 0;
                foreach (var value in array)
                {
                    p->_[i++] = value;
                    if (i >= Size) return;
                }
            }
        }

        public static implicit operator byte[](byte_array61440 @struct)
        {
            return @struct.ToArray();
        }
    }
}

#pragma warning restore 0169
